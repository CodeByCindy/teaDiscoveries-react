{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// import { COMMENTS } from '../../app/shared/oldData/COMMENTS';\nimport { baseUrl } from '../../app/shared/baseUrl';\nexport const fetchComments = createAsyncThunk('comments/fetchComments', async () => {\n  const response = await fetch(baseUrl + 'commentss');\n  if (!response.ok) {\n    return Promise.reject('Unable to fetch, status: ' + response.status);\n  }\n  const data = await response.json();\n  return data;\n});\nconst initialState = {\n  commentsArray: [],\n  isLoading: true,\n  errMsg: ''\n};\nconst commentsSlice = createSlice({\n  name: 'comments',\n  initialState,\n  reducers: {\n    addComment: (state, action) => {\n      const newComment = {\n        id: state.commentsArray.length + 1,\n        ...action.payload\n      };\n      state.commentsArray.push(newComment);\n    }\n  },\n  extraReducers: {\n    [fetchComments.pending]: state => {\n      state.isLoading = true;\n    },\n    [fetchComments.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.errMsg = '';\n      console.log(action.payload);\n      state.commentsArray = action.payload;\n    },\n    [fetchComments.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.errMsg = action.error ? action.error.message : 'Fetch failed';\n    }\n  }\n});\nexport const commentsReducer = commentsSlice.reducer;\nexport const {\n  addComment\n} = commentsSlice.actions;\nexport const selectCommentsByCampsiteId = campsiteId => state => {\n  return state.comments.commentsArray.filter(comment => comment.campsiteId === parseInt(campsiteId));\n};","map":{"version":3,"names":["createSlice","createAsyncThunk","baseUrl","fetchComments","response","fetch","ok","Promise","reject","status","data","json","initialState","commentsArray","isLoading","errMsg","commentsSlice","name","reducers","addComment","state","action","newComment","id","length","payload","push","extraReducers","pending","fulfilled","console","log","rejected","error","message","commentsReducer","reducer","actions","selectCommentsByCampsiteId","campsiteId","comments","filter","comment","parseInt"],"sources":["/Users/kennethhu/Desktop/NucampFolder/WebDev/3-React/nucampsite/src/features/comments/commentsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// import { COMMENTS } from '../../app/shared/oldData/COMMENTS';\nimport {baseUrl} from '../../app/shared/baseUrl';\nexport const fetchComments = createAsyncThunk(\n    'comments/fetchComments',\n    async () =>{\n        const response = await fetch(baseUrl + 'commentss');\n        if (!response.ok){\n            return Promise.reject('Unable to fetch, status: ' + response.status)\n        }\n        const data = await response.json();\n        return data;\n    }\n)\n\nconst initialState = {\n    commentsArray: [],\n    isLoading: true,\n    errMsg: ''\n};\n\nconst commentsSlice = createSlice({\n    name: 'comments',\n    initialState, \n    reducers: {\n        addComment: (state, action) => {\n            const newComment = {\n                id: state.commentsArray.length +1 ,\n                ...action.payload\n            };\n            state.commentsArray.push(newComment);\n        }\n    }, \n    extraReducers:{ \n        [fetchComments.pending]: (state) =>{\n            state.isLoading = true;\n        },\n        [fetchComments.fulfilled]: (state, action) =>{\n            state.isLoading = false;\n            state.errMsg = '';\n            console.log(action.payload);\n            state.commentsArray = action.payload;\n        }, \n        [fetchComments.rejected]: (state, action) =>{\n            state.isLoading = false;\n            state.errMsg = action.error? action.error.message : 'Fetch failed';\n        }\n    }\n});\n\nexport const commentsReducer = commentsSlice.reducer;\nexport const { addComment } = commentsSlice.actions;\n\nexport const selectCommentsByCampsiteId = (campsiteId) => (state) => {\n    return state.comments.commentsArray.filter(\n        (comment) => comment.campsiteId === parseInt(campsiteId)\n    );\n};"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE;AACA,SAAQC,OAAO,QAAO,0BAA0B;AAChD,OAAO,MAAMC,aAAa,GAAGF,gBAAgB,CACzC,wBAAwB,EACxB,YAAW;EACP,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACH,OAAO,GAAG,WAAW,CAAC;EACnD,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAC;IACb,OAAOC,OAAO,CAACC,MAAM,CAAC,2BAA2B,GAAGJ,QAAQ,CAACK,MAAM,CAAC;EACxE;EACA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI;AACf,CACJ,CAAC;AAED,MAAME,YAAY,GAAG;EACjBC,aAAa,EAAE,EAAE;EACjBC,SAAS,EAAE,IAAI;EACfC,MAAM,EAAE;AACZ,CAAC;AAED,MAAMC,aAAa,GAAGhB,WAAW,CAAC;EAC9BiB,IAAI,EAAE,UAAU;EAChBL,YAAY;EACZM,QAAQ,EAAE;IACNC,UAAU,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC3B,MAAMC,UAAU,GAAG;QACfC,EAAE,EAAEH,KAAK,CAACP,aAAa,CAACW,MAAM,GAAE,CAAC;QACjC,GAAGH,MAAM,CAACI;MACd,CAAC;MACDL,KAAK,CAACP,aAAa,CAACa,IAAI,CAACJ,UAAU,CAAC;IACxC;EACJ,CAAC;EACDK,aAAa,EAAC;IACV,CAACxB,aAAa,CAACyB,OAAO,GAAIR,KAAK,IAAI;MAC/BA,KAAK,CAACN,SAAS,GAAG,IAAI;IAC1B,CAAC;IACD,CAACX,aAAa,CAAC0B,SAAS,GAAG,CAACT,KAAK,EAAEC,MAAM,KAAI;MACzCD,KAAK,CAACN,SAAS,GAAG,KAAK;MACvBM,KAAK,CAACL,MAAM,GAAG,EAAE;MACjBe,OAAO,CAACC,GAAG,CAACV,MAAM,CAACI,OAAO,CAAC;MAC3BL,KAAK,CAACP,aAAa,GAAGQ,MAAM,CAACI,OAAO;IACxC,CAAC;IACD,CAACtB,aAAa,CAAC6B,QAAQ,GAAG,CAACZ,KAAK,EAAEC,MAAM,KAAI;MACxCD,KAAK,CAACN,SAAS,GAAG,KAAK;MACvBM,KAAK,CAACL,MAAM,GAAGM,MAAM,CAACY,KAAK,GAAEZ,MAAM,CAACY,KAAK,CAACC,OAAO,GAAG,cAAc;IACtE;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMC,eAAe,GAAGnB,aAAa,CAACoB,OAAO;AACpD,OAAO,MAAM;EAAEjB;AAAW,CAAC,GAAGH,aAAa,CAACqB,OAAO;AAEnD,OAAO,MAAMC,0BAA0B,GAAIC,UAAU,IAAMnB,KAAK,IAAK;EACjE,OAAOA,KAAK,CAACoB,QAAQ,CAAC3B,aAAa,CAAC4B,MAAM,CACrCC,OAAO,IAAKA,OAAO,CAACH,UAAU,KAAKI,QAAQ,CAACJ,UAAU,CAC3D,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}